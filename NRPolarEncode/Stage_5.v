// -------------------------------------------------------------
// 
// File Name: hdlsrc\NRPolarEncodeHDL\Stage_5.v
// Created: 2022-01-15 05:10:41
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Stage_5
// Source Path: NRPolarEncodeHDL/HDL Algorithm/NR Polar Encoder/encode/Stage 5
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Stage_5
          (clk,
           reset,
           enb,
           dataIn,
           validIn,
           dataOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;  // ufix1
  input   validIn;
  output  dataOut;  // ufix1
  output  validOut;


  reg  [0:30] Delay11_reg;  // ufix1 [31]
  wire [0:30] Delay11_reg_next;  // ufix1 [31]
  wire Delay11_out1;
  wire Detect_Increase_out1;
  reg  Delay_out1;
  reg [5:0] HDL_Counter5_out1;  // ufix6
  wire [11:0] Multiply4_cast;  // ufix12_En10
  wire Multiply4_out1;  // ufix1
  reg  [0:31] Delay10_reg;  // ufix1 [32]
  wire [0:31] Delay10_reg_next;  // ufix1 [32]
  wire Delay10_out1;  // ufix1
  wire XOR5_out1;  // ufix1
  wire Multiport_Switch5_out1;  // ufix1


  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_reg[0] <= 1'b0;
        Delay11_reg[1] <= 1'b0;
        Delay11_reg[2] <= 1'b0;
        Delay11_reg[3] <= 1'b0;
        Delay11_reg[4] <= 1'b0;
        Delay11_reg[5] <= 1'b0;
        Delay11_reg[6] <= 1'b0;
        Delay11_reg[7] <= 1'b0;
        Delay11_reg[8] <= 1'b0;
        Delay11_reg[9] <= 1'b0;
        Delay11_reg[10] <= 1'b0;
        Delay11_reg[11] <= 1'b0;
        Delay11_reg[12] <= 1'b0;
        Delay11_reg[13] <= 1'b0;
        Delay11_reg[14] <= 1'b0;
        Delay11_reg[15] <= 1'b0;
        Delay11_reg[16] <= 1'b0;
        Delay11_reg[17] <= 1'b0;
        Delay11_reg[18] <= 1'b0;
        Delay11_reg[19] <= 1'b0;
        Delay11_reg[20] <= 1'b0;
        Delay11_reg[21] <= 1'b0;
        Delay11_reg[22] <= 1'b0;
        Delay11_reg[23] <= 1'b0;
        Delay11_reg[24] <= 1'b0;
        Delay11_reg[25] <= 1'b0;
        Delay11_reg[26] <= 1'b0;
        Delay11_reg[27] <= 1'b0;
        Delay11_reg[28] <= 1'b0;
        Delay11_reg[29] <= 1'b0;
        Delay11_reg[30] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_reg[0] <= Delay11_reg_next[0];
          Delay11_reg[1] <= Delay11_reg_next[1];
          Delay11_reg[2] <= Delay11_reg_next[2];
          Delay11_reg[3] <= Delay11_reg_next[3];
          Delay11_reg[4] <= Delay11_reg_next[4];
          Delay11_reg[5] <= Delay11_reg_next[5];
          Delay11_reg[6] <= Delay11_reg_next[6];
          Delay11_reg[7] <= Delay11_reg_next[7];
          Delay11_reg[8] <= Delay11_reg_next[8];
          Delay11_reg[9] <= Delay11_reg_next[9];
          Delay11_reg[10] <= Delay11_reg_next[10];
          Delay11_reg[11] <= Delay11_reg_next[11];
          Delay11_reg[12] <= Delay11_reg_next[12];
          Delay11_reg[13] <= Delay11_reg_next[13];
          Delay11_reg[14] <= Delay11_reg_next[14];
          Delay11_reg[15] <= Delay11_reg_next[15];
          Delay11_reg[16] <= Delay11_reg_next[16];
          Delay11_reg[17] <= Delay11_reg_next[17];
          Delay11_reg[18] <= Delay11_reg_next[18];
          Delay11_reg[19] <= Delay11_reg_next[19];
          Delay11_reg[20] <= Delay11_reg_next[20];
          Delay11_reg[21] <= Delay11_reg_next[21];
          Delay11_reg[22] <= Delay11_reg_next[22];
          Delay11_reg[23] <= Delay11_reg_next[23];
          Delay11_reg[24] <= Delay11_reg_next[24];
          Delay11_reg[25] <= Delay11_reg_next[25];
          Delay11_reg[26] <= Delay11_reg_next[26];
          Delay11_reg[27] <= Delay11_reg_next[27];
          Delay11_reg[28] <= Delay11_reg_next[28];
          Delay11_reg[29] <= Delay11_reg_next[29];
          Delay11_reg[30] <= Delay11_reg_next[30];
        end
      end
    end

  assign Delay11_out1 = Delay11_reg[30];
  assign Delay11_reg_next[0] = validIn;
  assign Delay11_reg_next[1] = Delay11_reg[0];
  assign Delay11_reg_next[2] = Delay11_reg[1];
  assign Delay11_reg_next[3] = Delay11_reg[2];
  assign Delay11_reg_next[4] = Delay11_reg[3];
  assign Delay11_reg_next[5] = Delay11_reg[4];
  assign Delay11_reg_next[6] = Delay11_reg[5];
  assign Delay11_reg_next[7] = Delay11_reg[6];
  assign Delay11_reg_next[8] = Delay11_reg[7];
  assign Delay11_reg_next[9] = Delay11_reg[8];
  assign Delay11_reg_next[10] = Delay11_reg[9];
  assign Delay11_reg_next[11] = Delay11_reg[10];
  assign Delay11_reg_next[12] = Delay11_reg[11];
  assign Delay11_reg_next[13] = Delay11_reg[12];
  assign Delay11_reg_next[14] = Delay11_reg[13];
  assign Delay11_reg_next[15] = Delay11_reg[14];
  assign Delay11_reg_next[16] = Delay11_reg[15];
  assign Delay11_reg_next[17] = Delay11_reg[16];
  assign Delay11_reg_next[18] = Delay11_reg[17];
  assign Delay11_reg_next[19] = Delay11_reg[18];
  assign Delay11_reg_next[20] = Delay11_reg[19];
  assign Delay11_reg_next[21] = Delay11_reg[20];
  assign Delay11_reg_next[22] = Delay11_reg[21];
  assign Delay11_reg_next[23] = Delay11_reg[22];
  assign Delay11_reg_next[24] = Delay11_reg[23];
  assign Delay11_reg_next[25] = Delay11_reg[24];
  assign Delay11_reg_next[26] = Delay11_reg[25];
  assign Delay11_reg_next[27] = Delay11_reg[26];
  assign Delay11_reg_next[28] = Delay11_reg[27];
  assign Delay11_reg_next[29] = Delay11_reg[28];
  assign Delay11_reg_next[30] = Delay11_reg[29];



  Detect_Increase_block4 u_Detect_Increase (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .U(Delay11_out1),
                                            .Y(Detect_Increase_out1)
                                            );

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Delay11_out1;
        end
      end
    end



  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : HDL_Counter5_process
      if (reset == 1'b1) begin
        HDL_Counter5_out1 <= 6'b000000;
      end
      else begin
        if (enb) begin
          if (Detect_Increase_out1 == 1'b1) begin
            HDL_Counter5_out1 <= 6'b000000;
          end
          else if (Delay_out1 == 1'b1) begin
            HDL_Counter5_out1 <= HDL_Counter5_out1 + 6'b000001;
          end
        end
      end
    end



  assign Multiply4_cast = {1'b0, {HDL_Counter5_out1, 5'b00000}};
  assign Multiply4_out1 = Multiply4_cast[10];



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_reg[0] <= 1'b0;
        Delay10_reg[1] <= 1'b0;
        Delay10_reg[2] <= 1'b0;
        Delay10_reg[3] <= 1'b0;
        Delay10_reg[4] <= 1'b0;
        Delay10_reg[5] <= 1'b0;
        Delay10_reg[6] <= 1'b0;
        Delay10_reg[7] <= 1'b0;
        Delay10_reg[8] <= 1'b0;
        Delay10_reg[9] <= 1'b0;
        Delay10_reg[10] <= 1'b0;
        Delay10_reg[11] <= 1'b0;
        Delay10_reg[12] <= 1'b0;
        Delay10_reg[13] <= 1'b0;
        Delay10_reg[14] <= 1'b0;
        Delay10_reg[15] <= 1'b0;
        Delay10_reg[16] <= 1'b0;
        Delay10_reg[17] <= 1'b0;
        Delay10_reg[18] <= 1'b0;
        Delay10_reg[19] <= 1'b0;
        Delay10_reg[20] <= 1'b0;
        Delay10_reg[21] <= 1'b0;
        Delay10_reg[22] <= 1'b0;
        Delay10_reg[23] <= 1'b0;
        Delay10_reg[24] <= 1'b0;
        Delay10_reg[25] <= 1'b0;
        Delay10_reg[26] <= 1'b0;
        Delay10_reg[27] <= 1'b0;
        Delay10_reg[28] <= 1'b0;
        Delay10_reg[29] <= 1'b0;
        Delay10_reg[30] <= 1'b0;
        Delay10_reg[31] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_reg[0] <= Delay10_reg_next[0];
          Delay10_reg[1] <= Delay10_reg_next[1];
          Delay10_reg[2] <= Delay10_reg_next[2];
          Delay10_reg[3] <= Delay10_reg_next[3];
          Delay10_reg[4] <= Delay10_reg_next[4];
          Delay10_reg[5] <= Delay10_reg_next[5];
          Delay10_reg[6] <= Delay10_reg_next[6];
          Delay10_reg[7] <= Delay10_reg_next[7];
          Delay10_reg[8] <= Delay10_reg_next[8];
          Delay10_reg[9] <= Delay10_reg_next[9];
          Delay10_reg[10] <= Delay10_reg_next[10];
          Delay10_reg[11] <= Delay10_reg_next[11];
          Delay10_reg[12] <= Delay10_reg_next[12];
          Delay10_reg[13] <= Delay10_reg_next[13];
          Delay10_reg[14] <= Delay10_reg_next[14];
          Delay10_reg[15] <= Delay10_reg_next[15];
          Delay10_reg[16] <= Delay10_reg_next[16];
          Delay10_reg[17] <= Delay10_reg_next[17];
          Delay10_reg[18] <= Delay10_reg_next[18];
          Delay10_reg[19] <= Delay10_reg_next[19];
          Delay10_reg[20] <= Delay10_reg_next[20];
          Delay10_reg[21] <= Delay10_reg_next[21];
          Delay10_reg[22] <= Delay10_reg_next[22];
          Delay10_reg[23] <= Delay10_reg_next[23];
          Delay10_reg[24] <= Delay10_reg_next[24];
          Delay10_reg[25] <= Delay10_reg_next[25];
          Delay10_reg[26] <= Delay10_reg_next[26];
          Delay10_reg[27] <= Delay10_reg_next[27];
          Delay10_reg[28] <= Delay10_reg_next[28];
          Delay10_reg[29] <= Delay10_reg_next[29];
          Delay10_reg[30] <= Delay10_reg_next[30];
          Delay10_reg[31] <= Delay10_reg_next[31];
        end
      end
    end

  assign Delay10_out1 = Delay10_reg[31];
  assign Delay10_reg_next[0] = dataIn;
  assign Delay10_reg_next[1] = Delay10_reg[0];
  assign Delay10_reg_next[2] = Delay10_reg[1];
  assign Delay10_reg_next[3] = Delay10_reg[2];
  assign Delay10_reg_next[4] = Delay10_reg[3];
  assign Delay10_reg_next[5] = Delay10_reg[4];
  assign Delay10_reg_next[6] = Delay10_reg[5];
  assign Delay10_reg_next[7] = Delay10_reg[6];
  assign Delay10_reg_next[8] = Delay10_reg[7];
  assign Delay10_reg_next[9] = Delay10_reg[8];
  assign Delay10_reg_next[10] = Delay10_reg[9];
  assign Delay10_reg_next[11] = Delay10_reg[10];
  assign Delay10_reg_next[12] = Delay10_reg[11];
  assign Delay10_reg_next[13] = Delay10_reg[12];
  assign Delay10_reg_next[14] = Delay10_reg[13];
  assign Delay10_reg_next[15] = Delay10_reg[14];
  assign Delay10_reg_next[16] = Delay10_reg[15];
  assign Delay10_reg_next[17] = Delay10_reg[16];
  assign Delay10_reg_next[18] = Delay10_reg[17];
  assign Delay10_reg_next[19] = Delay10_reg[18];
  assign Delay10_reg_next[20] = Delay10_reg[19];
  assign Delay10_reg_next[21] = Delay10_reg[20];
  assign Delay10_reg_next[22] = Delay10_reg[21];
  assign Delay10_reg_next[23] = Delay10_reg[22];
  assign Delay10_reg_next[24] = Delay10_reg[23];
  assign Delay10_reg_next[25] = Delay10_reg[24];
  assign Delay10_reg_next[26] = Delay10_reg[25];
  assign Delay10_reg_next[27] = Delay10_reg[26];
  assign Delay10_reg_next[28] = Delay10_reg[27];
  assign Delay10_reg_next[29] = Delay10_reg[28];
  assign Delay10_reg_next[30] = Delay10_reg[29];
  assign Delay10_reg_next[31] = Delay10_reg[30];



  assign XOR5_out1 = dataIn ^ Delay10_out1;



  assign Multiport_Switch5_out1 = (Multiply4_out1 == 1'b0 ? XOR5_out1 :
              Delay10_out1);



  assign dataOut = Multiport_Switch5_out1;

  assign validOut = Delay_out1;

endmodule  // Stage_5


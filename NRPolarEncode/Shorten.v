// -------------------------------------------------------------
// 
// File Name: hdlsrc\NRPolarEncodeHDL\Shorten.v
// Created: 2022-01-15 05:10:41
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Shorten
// Source Path: NRPolarEncodeHDL/HDL Algorithm/NR Polar Encoder/configure/shortPunc/Shorten
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Shorten
          (clk,
           reset,
           enb,
           E,
           N,
           Indx,
           shorten_1);


  input   clk;
  input   reset;
  input   enb;
  input   [9:0] E;  // ufix10
  input   [10:0] N;  // ufix11
  input   [9:0] Indx;  // ufix10
  output  shorten_1;


  wire GreaterThanOrEqual_relop1;
  reg  Delay_out1;
  wire [10:0] Less_Than_1_1;  // ufix11
  wire Less_Than_relop1;
  reg  Delay1_out1;
  wire AND_out1;
  reg  [0:1] Delay2_reg;  // ufix1 [2]
  wire [0:1] Delay2_reg_next;  // ufix1 [2]
  wire Delay2_out1;


  assign GreaterThanOrEqual_relop1 = Indx >= E;



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= GreaterThanOrEqual_relop1;
        end
      end
    end



  assign Less_Than_1_1 = {1'b0, Indx};
  assign Less_Than_relop1 = Less_Than_1_1 < N;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Less_Than_relop1;
        end
      end
    end



  assign AND_out1 = Delay_out1 & Delay1_out1;



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_reg[0] <= 1'b0;
        Delay2_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= Delay2_reg_next[0];
          Delay2_reg[1] <= Delay2_reg_next[1];
        end
      end
    end

  assign Delay2_out1 = Delay2_reg[1];
  assign Delay2_reg_next[0] = AND_out1;
  assign Delay2_reg_next[1] = Delay2_reg[0];



  assign shorten_1 = Delay2_out1;

endmodule  // Shorten


// -------------------------------------------------------------
// 
// File Name: hdlsrc\NRPolarEncodeHDL\J_calc.v
// Created: 2022-01-15 05:10:41
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: J_calc
// Source Path: NRPolarEncodeHDL/HDL Algorithm/NR Polar Encoder/configure/shortPunc/J_calc
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module J_calc
          (clk,
           reset,
           enb,
           idx,
           n,
           J);


  input   clk;
  input   reset;
  input   enb;
  input   [9:0] idx;  // ufix10
  input   [7:0] n;  // uint8
  output  [9:0] J;  // ufix10


  wire [2:0] Constant_out1;  // ufix3
  wire signed [31:0] Subtract_sub_temp;  // sfix32
  wire signed [31:0] Subtract_1;  // sfix32
  wire signed [31:0] Subtract_2;  // sfix32
  wire [3:0] Subtract_out1;  // ufix4
  reg [3:0] Delay9_out1;  // ufix4
  wire [7:0] shift_arithmetic_1;  // uint8
  wire [9:0] Shift_Arithmetic_out1;  // ufix10
  wire [4:0] Data_Type_Conversion_out1;  // ufix5
  reg [4:0] Delay8_out1;  // ufix5
  wire [4:0] alpha1_D_Lookup_Table_k;  // ufix5
  wire [4:0] alpha1_D_Lookup_Table_1 [0:31];  // ufix5 [32]
  wire [4:0] alpha1_D_Lookup_Table_out1;  // ufix5
  reg [4:0] Delay_out1;  // ufix5
  wire [9:0] Data_Type_Conversion1_out1;  // ufix10
  reg [3:0] Delay1_reg [0:1];  // ufix4 [2]
  wire [3:0] Delay1_reg_next [0:1];  // ufix4 [2]
  wire [3:0] Delay1_out1;  // ufix4
  wire [7:0] shift_arithmetic1_1;  // uint8
  wire [9:0] Shift_Arithmetic1_out1;  // ufix10
  reg [9:0] Delay3_out1;  // ufix10
  wire [4:0] Cast_out1;  // ufix5
  reg [4:0] Delay6_out1;  // ufix5
  wire [2:0] alpha1_D_Lookup_Table1_k;  // ufix3
  wire [4:0] alpha1_D_Lookup_Table1_1 [0:5];  // ufix5 [6]
  wire [4:0] alpha1_D_Lookup_Table1_out1;  // ufix5
  reg [4:0] Delay5_out1;  // ufix5
  wire [4:0] AND_out1;  // ufix5
  reg [4:0] Delay4_reg [0:1];  // ufix5 [2]
  wire [4:0] Delay4_reg_next [0:1];  // ufix5 [2]
  wire [4:0] Delay4_out1;  // ufix5
  wire [31:0] Add_add_temp;  // ufix32
  wire [31:0] Add_1;  // ufix32
  wire [31:0] Add_2;  // ufix32
  wire [9:0] Add_out1;  // ufix10


  assign Constant_out1 = 3'b101;



  assign Subtract_1 = {24'b0, n};
  assign Subtract_2 = {29'b0, Constant_out1};
  assign Subtract_sub_temp = Subtract_1 - Subtract_2;
  assign Subtract_out1 = ((Subtract_sub_temp[31] == 1'b0) && (Subtract_sub_temp[30:4] != 27'b000000000000000000000000000) ? 4'b1111 :
              (Subtract_sub_temp[31] == 1'b1 ? 4'b0000 :
              Subtract_sub_temp[3:0]));



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= Subtract_out1;
        end
      end
    end



  assign shift_arithmetic_1 = {4'b0, Delay9_out1};
  assign Shift_Arithmetic_out1 = idx >>> shift_arithmetic_1;



  assign Data_Type_Conversion_out1 = Shift_Arithmetic_out1[4:0];



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= Data_Type_Conversion_out1;
        end
      end
    end



  assign alpha1_D_Lookup_Table_1[0] = 5'b00000;
  assign alpha1_D_Lookup_Table_1[1] = 5'b00001;
  assign alpha1_D_Lookup_Table_1[2] = 5'b00010;
  assign alpha1_D_Lookup_Table_1[3] = 5'b00100;
  assign alpha1_D_Lookup_Table_1[4] = 5'b00011;
  assign alpha1_D_Lookup_Table_1[5] = 5'b00101;
  assign alpha1_D_Lookup_Table_1[6] = 5'b00110;
  assign alpha1_D_Lookup_Table_1[7] = 5'b00111;
  assign alpha1_D_Lookup_Table_1[8] = 5'b01000;
  assign alpha1_D_Lookup_Table_1[9] = 5'b10000;
  assign alpha1_D_Lookup_Table_1[10] = 5'b01001;
  assign alpha1_D_Lookup_Table_1[11] = 5'b10001;
  assign alpha1_D_Lookup_Table_1[12] = 5'b01010;
  assign alpha1_D_Lookup_Table_1[13] = 5'b10010;
  assign alpha1_D_Lookup_Table_1[14] = 5'b01011;
  assign alpha1_D_Lookup_Table_1[15] = 5'b10011;
  assign alpha1_D_Lookup_Table_1[16] = 5'b01100;
  assign alpha1_D_Lookup_Table_1[17] = 5'b10100;
  assign alpha1_D_Lookup_Table_1[18] = 5'b01101;
  assign alpha1_D_Lookup_Table_1[19] = 5'b10101;
  assign alpha1_D_Lookup_Table_1[20] = 5'b01110;
  assign alpha1_D_Lookup_Table_1[21] = 5'b10110;
  assign alpha1_D_Lookup_Table_1[22] = 5'b01111;
  assign alpha1_D_Lookup_Table_1[23] = 5'b10111;
  assign alpha1_D_Lookup_Table_1[24] = 5'b11000;
  assign alpha1_D_Lookup_Table_1[25] = 5'b11001;
  assign alpha1_D_Lookup_Table_1[26] = 5'b11010;
  assign alpha1_D_Lookup_Table_1[27] = 5'b11100;
  assign alpha1_D_Lookup_Table_1[28] = 5'b11011;
  assign alpha1_D_Lookup_Table_1[29] = 5'b11101;
  assign alpha1_D_Lookup_Table_1[30] = 5'b11110;
  assign alpha1_D_Lookup_Table_1[31] = 5'b11111;
  assign alpha1_D_Lookup_Table_k = (Delay8_out1 == 5'b00000 ? 5'b00000 :
              (Delay8_out1 == 5'b11111 ? 5'b11111 :
              Delay8_out1));
  assign alpha1_D_Lookup_Table_out1 = alpha1_D_Lookup_Table_1[alpha1_D_Lookup_Table_k];



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= alpha1_D_Lookup_Table_out1;
        end
      end
    end



  assign Data_Type_Conversion1_out1 = {5'b0, Delay_out1};



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg[0] <= 4'b0000;
        Delay1_reg[1] <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Delay1_reg_next[0];
          Delay1_reg[1] <= Delay1_reg_next[1];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[1];
  assign Delay1_reg_next[0] = Delay9_out1;
  assign Delay1_reg_next[1] = Delay1_reg[0];



  assign shift_arithmetic1_1 = {4'b0, Delay1_out1};
  assign Shift_Arithmetic1_out1 = Data_Type_Conversion1_out1 <<< shift_arithmetic1_1;



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Shift_Arithmetic1_out1;
        end
      end
    end



  assign Cast_out1 = idx[4:0];



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Cast_out1;
        end
      end
    end



  assign alpha1_D_Lookup_Table1_1[0] = 5'b00000;
  assign alpha1_D_Lookup_Table1_1[1] = 5'b00001;
  assign alpha1_D_Lookup_Table1_1[2] = 5'b00011;
  assign alpha1_D_Lookup_Table1_1[3] = 5'b00111;
  assign alpha1_D_Lookup_Table1_1[4] = 5'b01111;
  assign alpha1_D_Lookup_Table1_1[5] = 5'b11111;
  assign alpha1_D_Lookup_Table1_k = (Delay9_out1 == 4'b0000 ? 3'b000 :
              (Delay9_out1 >= 4'b0101 ? 3'b101 :
              Delay9_out1[2:0]));
  assign alpha1_D_Lookup_Table1_out1 = alpha1_D_Lookup_Table1_1[alpha1_D_Lookup_Table1_k];



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= alpha1_D_Lookup_Table1_out1;
        end
      end
    end



  assign AND_out1 = Delay6_out1 & Delay5_out1;



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_reg[0] <= 5'b00000;
        Delay4_reg[1] <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay4_reg[0] <= Delay4_reg_next[0];
          Delay4_reg[1] <= Delay4_reg_next[1];
        end
      end
    end

  assign Delay4_out1 = Delay4_reg[1];
  assign Delay4_reg_next[0] = AND_out1;
  assign Delay4_reg_next[1] = Delay4_reg[0];



  assign Add_1 = {22'b0, Delay3_out1};
  assign Add_2 = {27'b0, Delay4_out1};
  assign Add_add_temp = Add_1 + Add_2;
  assign Add_out1 = Add_add_temp[9:0];



  assign J = Add_out1;

endmodule  // J_calc


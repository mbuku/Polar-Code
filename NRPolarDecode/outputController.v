// -------------------------------------------------------------
// 
// File Name: hdlsrc\NRPolarDecodeHDL\outputController.v
// Created: 2022-01-15 05:13:24
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: outputController
// Source Path: NRPolarDecodeHDL/HDL Algorithm/NR Polar Decoder/outputController
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module outputController
          (clk,
           reset,
           enb,
           startOutput,
           K,
           crcDone,
           pathRdAddr,
           rdPath,
           startInt,
           endInt,
           validInt,
           validCrc);


  input   clk;
  input   reset;
  input   enb;
  input   startOutput;
  input   [9:0] K;  // ufix10
  input   crcDone;
  output  [9:0] pathRdAddr;  // ufix10
  output  rdPath;
  output  startInt;
  output  endInt;
  output  validInt;
  output  validCrc;


  reg [1:0] outputController_reg_state;  // ufix2
  reg [9:0] outputController_reg_pathRdAddr;  // ufix10
  reg  outputController_reg_rdPath;
  reg  outputController_reg_pathSel;  // ufix1
  reg [9:0] outputController_reg_KLatch;  // ufix10
  reg  outputController_reg_start;
  reg  outputController_reg_end;
  reg  outputController_reg_valid;
  reg  outputController_reg_validCrc;
  reg [1:0] outputController_reg_state_next;  // ufix2
  reg [9:0] outputController_reg_pathRdAddr_next;  // ufix10
  reg  outputController_reg_rdPath_next;
  reg  outputController_reg_pathSel_next;  // ufix1
  reg [9:0] outputController_reg_KLatch_next;  // ufix10
  reg  outputController_reg_start_next;
  reg  outputController_reg_end_next;
  reg  outputController_reg_valid_next;
  reg  outputController_reg_validCrc_next;
  reg [9:0] pathRdAddr_1;  // ufix10
  reg  rdPath_1;
  reg  startInt_1;
  reg  endInt_1;
  reg  validInt_1;
  reg  validCrc_1;
  reg [10:0] outputController_sub_temp;  // ufix11
  reg [10:0] outputController_sub_temp_0;  // ufix11
  reg [11:0] outputController_sub_temp_1;  // ufix12
  reg [10:0] outputController_sub_temp_2;  // ufix11
  reg [10:0] outputController_sub_temp_3;  // ufix11
  reg [11:0] outputController_sub_temp_4;  // ufix12
  reg [11:0] outputController_t_0_0;  // ufix12
  reg [11:0] outputController_t_1;  // ufix12
  reg [10:0] outputController_t_2;  // ufix11
  reg [10:0] outputController_t_3;  // ufix11
  reg [10:0] outputController_t_4;  // ufix11
  reg [10:0] outputController_t_5;  // ufix11
  reg [11:0] outputController_t_6;  // ufix12
  reg [10:0] outputController_t_7;  // ufix11
  reg [10:0] outputController_t_8;  // ufix11
  reg [11:0] outputController_t_9;  // ufix12


  // outputController - reconstructs output paths, runs CRC and outputs best path
  always @(posedge clk or posedge reset)
    begin : outputController_1_process
      if (reset == 1'b1) begin
        outputController_reg_state <= 2'b00;
        outputController_reg_pathRdAddr <= 10'b0000000000;
        outputController_reg_rdPath <= 1'b0;
        outputController_reg_pathSel <= 1'b0;
        outputController_reg_KLatch <= 10'b0000000000;
        outputController_reg_start <= 1'b0;
        outputController_reg_end <= 1'b0;
        outputController_reg_valid <= 1'b0;
        outputController_reg_validCrc <= 1'b0;
      end
      else begin
        if (enb) begin
          outputController_reg_state <= outputController_reg_state_next;
          outputController_reg_pathRdAddr <= outputController_reg_pathRdAddr_next;
          outputController_reg_rdPath <= outputController_reg_rdPath_next;
          outputController_reg_pathSel <= outputController_reg_pathSel_next;
          outputController_reg_KLatch <= outputController_reg_KLatch_next;
          outputController_reg_start <= outputController_reg_start_next;
          outputController_reg_end <= outputController_reg_end_next;
          outputController_reg_valid <= outputController_reg_valid_next;
          outputController_reg_validCrc <= outputController_reg_validCrc_next;
        end
      end
    end

  always @(K, crcDone, outputController_reg_KLatch, outputController_reg_end,
       outputController_reg_pathRdAddr, outputController_reg_pathSel,
       outputController_reg_rdPath, outputController_reg_start,
       outputController_reg_state, outputController_reg_valid,
       outputController_reg_validCrc, startOutput) begin
    outputController_sub_temp = 11'b00000000000;
    outputController_sub_temp_0 = 11'b00000000000;
    outputController_sub_temp_1 = 12'b000000000000;
    outputController_sub_temp_2 = 11'b00000000000;
    outputController_sub_temp_3 = 11'b00000000000;
    outputController_sub_temp_4 = 12'b000000000000;
    outputController_t_0_0 = 12'b000000000000;
    outputController_t_1 = 12'b000000000000;
    outputController_t_2 = 11'b00000000000;
    outputController_t_3 = 11'b00000000000;
    outputController_t_4 = 11'b00000000000;
    outputController_t_5 = 11'b00000000000;
    outputController_t_6 = 12'b000000000000;
    outputController_t_7 = 11'b00000000000;
    outputController_t_8 = 11'b00000000000;
    outputController_t_9 = 12'b000000000000;
    outputController_reg_state_next = outputController_reg_state;
    outputController_reg_pathRdAddr_next = outputController_reg_pathRdAddr;
    outputController_reg_rdPath_next = outputController_reg_rdPath;
    outputController_reg_KLatch_next = outputController_reg_KLatch;
    outputController_reg_start_next = outputController_reg_start;
    outputController_reg_end_next = outputController_reg_end;
    outputController_reg_valid_next = outputController_reg_valid;
    outputController_reg_validCrc_next = outputController_reg_validCrc;
    case ( outputController_reg_state)
      2'b00 :
        begin
          if (startOutput) begin
            outputController_reg_state_next = 2'b01;
            outputController_reg_rdPath_next = 1'b1;
            outputController_reg_start_next = 1'b1;
            outputController_reg_validCrc_next = 1'b1;
            outputController_reg_KLatch_next = K;
          end
        end
      2'b01 :
        begin
          outputController_reg_start_next = 1'b0;
          outputController_t_4 = {1'b0, outputController_reg_KLatch};
          outputController_sub_temp = outputController_t_4 - 11'b00000000001;
          outputController_t_2 = {1'b0, outputController_reg_pathRdAddr};
          if (outputController_t_2 == outputController_sub_temp) begin
            outputController_reg_end_next = 1'b0;
            outputController_reg_rdPath_next = 1'b0;
            outputController_reg_validCrc_next = 1'b0;
            if (crcDone) begin
              outputController_reg_state_next = 2'b10;
              outputController_reg_pathRdAddr_next = 10'b0000000000;
              outputController_reg_start_next = 1'b1;
              outputController_reg_rdPath_next = 1'b1;
              outputController_reg_valid_next = 1'b1;
            end
          end
          else begin
            outputController_t_7 = {1'b0, outputController_reg_KLatch};
            outputController_sub_temp_2 = outputController_t_7 - 11'b00000000010;
            outputController_t_3 = {1'b0, outputController_reg_pathRdAddr};
            if (outputController_t_3 == outputController_sub_temp_2) begin
              outputController_reg_end_next = 1'b1;
            end
            outputController_reg_pathRdAddr_next = outputController_reg_pathRdAddr + 10'b0000000001;
          end
        end
      2'b10 :
        begin
          outputController_reg_start_next = 1'b0;
          outputController_t_5 = {1'b0, outputController_reg_KLatch};
          outputController_sub_temp_0 = outputController_t_5 - 11'b00000000001;
          outputController_t_6 = {1'b0, outputController_sub_temp_0};
          outputController_sub_temp_1 = outputController_t_6 - 12'b000000001011;
          outputController_t_0_0 = {2'b0, outputController_reg_pathRdAddr};
          if (outputController_t_0_0 == outputController_sub_temp_1) begin
            outputController_reg_state_next = 2'b00;
            outputController_reg_pathRdAddr_next = 10'b0000000000;
            outputController_reg_rdPath_next = 1'b0;
            outputController_reg_end_next = 1'b0;
            outputController_reg_valid_next = 1'b0;
          end
          else begin
            outputController_t_8 = {1'b0, outputController_reg_KLatch};
            outputController_sub_temp_3 = outputController_t_8 - 11'b00000000010;
            outputController_t_9 = {1'b0, outputController_sub_temp_3};
            outputController_sub_temp_4 = outputController_t_9 - 12'b000000001011;
            outputController_t_1 = {2'b0, outputController_reg_pathRdAddr};
            if (outputController_t_1 == outputController_sub_temp_4) begin
              outputController_reg_end_next = 1'b1;
            end
            outputController_reg_pathRdAddr_next = outputController_reg_pathRdAddr + 10'b0000000001;
          end
        end
    endcase
    outputController_reg_pathSel_next = outputController_reg_pathSel;
    pathRdAddr_1 = outputController_reg_pathRdAddr;
    rdPath_1 = outputController_reg_rdPath;
    startInt_1 = outputController_reg_start;
    endInt_1 = outputController_reg_end;
    validInt_1 = outputController_reg_valid;
    validCrc_1 = outputController_reg_validCrc;
  end



  assign pathRdAddr = pathRdAddr_1;

  assign rdPath = rdPath_1;

  assign startInt = startInt_1;

  assign endInt = endInt_1;

  assign validInt = validInt_1;

  assign validCrc = validCrc_1;

endmodule  // outputController


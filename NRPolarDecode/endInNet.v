// -------------------------------------------------------------
// 
// File Name: hdlsrc\NRPolarDecodeHDL\endInNet.v
// Created: 2022-01-15 05:13:24
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: endInNet
// Source Path: NRPolarDecodeHDL/HDL Algorithm/NR Polar Decoder/CRC Decoder/endInNet
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module endInNet
          (clk,
           reset,
           enb,
           endin,
           out);


  input   clk;
  input   reset;
  input   enb;
  input   endin;  // ufix1
  output  out;  // ufix1


  reg  [0:11] endInDelayerComp_reg;  // ufix1 [12]
  reg  [0:11] endInDelayerComp_reg_next;  // ufix1 [12]
  reg  out_1;  // ufix1
  reg  endInDelayerComp_y;
  reg  [0:11] endInDelayerComp_reg_temp;  // ufix1 [12]


  // endIn_Delayer
  always @(posedge clk or posedge reset)
    begin : endInDelayerComp_process
      if (reset == 1'b1) begin
        endInDelayerComp_reg[0] <= 1'b0;
        endInDelayerComp_reg[1] <= 1'b0;
        endInDelayerComp_reg[2] <= 1'b0;
        endInDelayerComp_reg[3] <= 1'b0;
        endInDelayerComp_reg[4] <= 1'b0;
        endInDelayerComp_reg[5] <= 1'b0;
        endInDelayerComp_reg[6] <= 1'b0;
        endInDelayerComp_reg[7] <= 1'b0;
        endInDelayerComp_reg[8] <= 1'b0;
        endInDelayerComp_reg[9] <= 1'b0;
        endInDelayerComp_reg[10] <= 1'b0;
        endInDelayerComp_reg[11] <= 1'b0;
      end
      else begin
        if (enb) begin
          endInDelayerComp_reg[0] <= endInDelayerComp_reg_next[0];
          endInDelayerComp_reg[1] <= endInDelayerComp_reg_next[1];
          endInDelayerComp_reg[2] <= endInDelayerComp_reg_next[2];
          endInDelayerComp_reg[3] <= endInDelayerComp_reg_next[3];
          endInDelayerComp_reg[4] <= endInDelayerComp_reg_next[4];
          endInDelayerComp_reg[5] <= endInDelayerComp_reg_next[5];
          endInDelayerComp_reg[6] <= endInDelayerComp_reg_next[6];
          endInDelayerComp_reg[7] <= endInDelayerComp_reg_next[7];
          endInDelayerComp_reg[8] <= endInDelayerComp_reg_next[8];
          endInDelayerComp_reg[9] <= endInDelayerComp_reg_next[9];
          endInDelayerComp_reg[10] <= endInDelayerComp_reg_next[10];
          endInDelayerComp_reg[11] <= endInDelayerComp_reg_next[11];
        end
      end
    end

  always @* begin
    endInDelayerComp_reg_temp[0] = endInDelayerComp_reg[1];
    endInDelayerComp_y = (((((endInDelayerComp_reg_temp[0] != 1'b0) || (endInDelayerComp_reg[2] != 1'b0)) || (endInDelayerComp_reg[3] != 1'b0)) || (endInDelayerComp_reg[4] != 1'b0)) || (endInDelayerComp_reg[5] != 1'b0)) || (endInDelayerComp_reg[6] != 1'b0);
    endInDelayerComp_y = endInDelayerComp_y || endInDelayerComp_reg[7];
    endInDelayerComp_y = endInDelayerComp_y || endInDelayerComp_reg[8];
    endInDelayerComp_y = endInDelayerComp_y || endInDelayerComp_reg[9];
    endInDelayerComp_y = endInDelayerComp_y || endInDelayerComp_reg[10];
    endInDelayerComp_y = endInDelayerComp_y || endInDelayerComp_reg[11];
    endInDelayerComp_y = endInDelayerComp_y || endin;
    out_1 = endInDelayerComp_y || endin;
    endInDelayerComp_reg_next[0] = endInDelayerComp_reg[1];
    endInDelayerComp_reg_next[1] = endInDelayerComp_reg[2];
    endInDelayerComp_reg_next[2] = endInDelayerComp_reg[3];
    endInDelayerComp_reg_next[3] = endInDelayerComp_reg[4];
    endInDelayerComp_reg_next[4] = endInDelayerComp_reg[5];
    endInDelayerComp_reg_next[5] = endInDelayerComp_reg[6];
    endInDelayerComp_reg_next[6] = endInDelayerComp_reg[7];
    endInDelayerComp_reg_next[7] = endInDelayerComp_reg[8];
    endInDelayerComp_reg_next[8] = endInDelayerComp_reg[9];
    endInDelayerComp_reg_next[9] = endInDelayerComp_reg[10];
    endInDelayerComp_reg_next[10] = endInDelayerComp_reg[11];
    endInDelayerComp_reg_next[11] = endin;
  end



  assign out = out_1;

endmodule  // endInNet


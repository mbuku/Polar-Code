// -------------------------------------------------------------
// 
// File Name: hdlsrc\NRPolarEncodeHDL\Stage_6.v
// Created: 2022-01-15 05:10:42
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Stage_6
// Source Path: NRPolarEncodeHDL/HDL Algorithm/NR Polar Encoder/encode/Stage 6
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Stage_6
          (clk,
           reset,
           enb,
           dataIn,
           validIn,
           dataOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;  // ufix1
  input   validIn;
  output  dataOut;  // ufix1
  output  validOut;


  reg  [0:62] Delay13_reg;  // ufix1 [63]
  wire [0:62] Delay13_reg_next;  // ufix1 [63]
  wire Delay13_out1;
  wire Detect_Increase_out1;
  reg  Delay_out1;
  reg [6:0] HDL_Counter6_out1;  // ufix7
  wire [13:0] Multiply5_cast;  // ufix14_En12
  wire Multiply5_out1;  // ufix1
  reg  [0:63] Delay12_reg;  // ufix1 [64]
  wire [0:63] Delay12_reg_next;  // ufix1 [64]
  wire Delay12_out1;  // ufix1
  wire XOR6_out1;  // ufix1
  wire Multiport_Switch6_out1;  // ufix1


  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_reg[0] <= 1'b0;
        Delay13_reg[1] <= 1'b0;
        Delay13_reg[2] <= 1'b0;
        Delay13_reg[3] <= 1'b0;
        Delay13_reg[4] <= 1'b0;
        Delay13_reg[5] <= 1'b0;
        Delay13_reg[6] <= 1'b0;
        Delay13_reg[7] <= 1'b0;
        Delay13_reg[8] <= 1'b0;
        Delay13_reg[9] <= 1'b0;
        Delay13_reg[10] <= 1'b0;
        Delay13_reg[11] <= 1'b0;
        Delay13_reg[12] <= 1'b0;
        Delay13_reg[13] <= 1'b0;
        Delay13_reg[14] <= 1'b0;
        Delay13_reg[15] <= 1'b0;
        Delay13_reg[16] <= 1'b0;
        Delay13_reg[17] <= 1'b0;
        Delay13_reg[18] <= 1'b0;
        Delay13_reg[19] <= 1'b0;
        Delay13_reg[20] <= 1'b0;
        Delay13_reg[21] <= 1'b0;
        Delay13_reg[22] <= 1'b0;
        Delay13_reg[23] <= 1'b0;
        Delay13_reg[24] <= 1'b0;
        Delay13_reg[25] <= 1'b0;
        Delay13_reg[26] <= 1'b0;
        Delay13_reg[27] <= 1'b0;
        Delay13_reg[28] <= 1'b0;
        Delay13_reg[29] <= 1'b0;
        Delay13_reg[30] <= 1'b0;
        Delay13_reg[31] <= 1'b0;
        Delay13_reg[32] <= 1'b0;
        Delay13_reg[33] <= 1'b0;
        Delay13_reg[34] <= 1'b0;
        Delay13_reg[35] <= 1'b0;
        Delay13_reg[36] <= 1'b0;
        Delay13_reg[37] <= 1'b0;
        Delay13_reg[38] <= 1'b0;
        Delay13_reg[39] <= 1'b0;
        Delay13_reg[40] <= 1'b0;
        Delay13_reg[41] <= 1'b0;
        Delay13_reg[42] <= 1'b0;
        Delay13_reg[43] <= 1'b0;
        Delay13_reg[44] <= 1'b0;
        Delay13_reg[45] <= 1'b0;
        Delay13_reg[46] <= 1'b0;
        Delay13_reg[47] <= 1'b0;
        Delay13_reg[48] <= 1'b0;
        Delay13_reg[49] <= 1'b0;
        Delay13_reg[50] <= 1'b0;
        Delay13_reg[51] <= 1'b0;
        Delay13_reg[52] <= 1'b0;
        Delay13_reg[53] <= 1'b0;
        Delay13_reg[54] <= 1'b0;
        Delay13_reg[55] <= 1'b0;
        Delay13_reg[56] <= 1'b0;
        Delay13_reg[57] <= 1'b0;
        Delay13_reg[58] <= 1'b0;
        Delay13_reg[59] <= 1'b0;
        Delay13_reg[60] <= 1'b0;
        Delay13_reg[61] <= 1'b0;
        Delay13_reg[62] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay13_reg[0] <= Delay13_reg_next[0];
          Delay13_reg[1] <= Delay13_reg_next[1];
          Delay13_reg[2] <= Delay13_reg_next[2];
          Delay13_reg[3] <= Delay13_reg_next[3];
          Delay13_reg[4] <= Delay13_reg_next[4];
          Delay13_reg[5] <= Delay13_reg_next[5];
          Delay13_reg[6] <= Delay13_reg_next[6];
          Delay13_reg[7] <= Delay13_reg_next[7];
          Delay13_reg[8] <= Delay13_reg_next[8];
          Delay13_reg[9] <= Delay13_reg_next[9];
          Delay13_reg[10] <= Delay13_reg_next[10];
          Delay13_reg[11] <= Delay13_reg_next[11];
          Delay13_reg[12] <= Delay13_reg_next[12];
          Delay13_reg[13] <= Delay13_reg_next[13];
          Delay13_reg[14] <= Delay13_reg_next[14];
          Delay13_reg[15] <= Delay13_reg_next[15];
          Delay13_reg[16] <= Delay13_reg_next[16];
          Delay13_reg[17] <= Delay13_reg_next[17];
          Delay13_reg[18] <= Delay13_reg_next[18];
          Delay13_reg[19] <= Delay13_reg_next[19];
          Delay13_reg[20] <= Delay13_reg_next[20];
          Delay13_reg[21] <= Delay13_reg_next[21];
          Delay13_reg[22] <= Delay13_reg_next[22];
          Delay13_reg[23] <= Delay13_reg_next[23];
          Delay13_reg[24] <= Delay13_reg_next[24];
          Delay13_reg[25] <= Delay13_reg_next[25];
          Delay13_reg[26] <= Delay13_reg_next[26];
          Delay13_reg[27] <= Delay13_reg_next[27];
          Delay13_reg[28] <= Delay13_reg_next[28];
          Delay13_reg[29] <= Delay13_reg_next[29];
          Delay13_reg[30] <= Delay13_reg_next[30];
          Delay13_reg[31] <= Delay13_reg_next[31];
          Delay13_reg[32] <= Delay13_reg_next[32];
          Delay13_reg[33] <= Delay13_reg_next[33];
          Delay13_reg[34] <= Delay13_reg_next[34];
          Delay13_reg[35] <= Delay13_reg_next[35];
          Delay13_reg[36] <= Delay13_reg_next[36];
          Delay13_reg[37] <= Delay13_reg_next[37];
          Delay13_reg[38] <= Delay13_reg_next[38];
          Delay13_reg[39] <= Delay13_reg_next[39];
          Delay13_reg[40] <= Delay13_reg_next[40];
          Delay13_reg[41] <= Delay13_reg_next[41];
          Delay13_reg[42] <= Delay13_reg_next[42];
          Delay13_reg[43] <= Delay13_reg_next[43];
          Delay13_reg[44] <= Delay13_reg_next[44];
          Delay13_reg[45] <= Delay13_reg_next[45];
          Delay13_reg[46] <= Delay13_reg_next[46];
          Delay13_reg[47] <= Delay13_reg_next[47];
          Delay13_reg[48] <= Delay13_reg_next[48];
          Delay13_reg[49] <= Delay13_reg_next[49];
          Delay13_reg[50] <= Delay13_reg_next[50];
          Delay13_reg[51] <= Delay13_reg_next[51];
          Delay13_reg[52] <= Delay13_reg_next[52];
          Delay13_reg[53] <= Delay13_reg_next[53];
          Delay13_reg[54] <= Delay13_reg_next[54];
          Delay13_reg[55] <= Delay13_reg_next[55];
          Delay13_reg[56] <= Delay13_reg_next[56];
          Delay13_reg[57] <= Delay13_reg_next[57];
          Delay13_reg[58] <= Delay13_reg_next[58];
          Delay13_reg[59] <= Delay13_reg_next[59];
          Delay13_reg[60] <= Delay13_reg_next[60];
          Delay13_reg[61] <= Delay13_reg_next[61];
          Delay13_reg[62] <= Delay13_reg_next[62];
        end
      end
    end

  assign Delay13_out1 = Delay13_reg[62];
  assign Delay13_reg_next[0] = validIn;
  assign Delay13_reg_next[1] = Delay13_reg[0];
  assign Delay13_reg_next[2] = Delay13_reg[1];
  assign Delay13_reg_next[3] = Delay13_reg[2];
  assign Delay13_reg_next[4] = Delay13_reg[3];
  assign Delay13_reg_next[5] = Delay13_reg[4];
  assign Delay13_reg_next[6] = Delay13_reg[5];
  assign Delay13_reg_next[7] = Delay13_reg[6];
  assign Delay13_reg_next[8] = Delay13_reg[7];
  assign Delay13_reg_next[9] = Delay13_reg[8];
  assign Delay13_reg_next[10] = Delay13_reg[9];
  assign Delay13_reg_next[11] = Delay13_reg[10];
  assign Delay13_reg_next[12] = Delay13_reg[11];
  assign Delay13_reg_next[13] = Delay13_reg[12];
  assign Delay13_reg_next[14] = Delay13_reg[13];
  assign Delay13_reg_next[15] = Delay13_reg[14];
  assign Delay13_reg_next[16] = Delay13_reg[15];
  assign Delay13_reg_next[17] = Delay13_reg[16];
  assign Delay13_reg_next[18] = Delay13_reg[17];
  assign Delay13_reg_next[19] = Delay13_reg[18];
  assign Delay13_reg_next[20] = Delay13_reg[19];
  assign Delay13_reg_next[21] = Delay13_reg[20];
  assign Delay13_reg_next[22] = Delay13_reg[21];
  assign Delay13_reg_next[23] = Delay13_reg[22];
  assign Delay13_reg_next[24] = Delay13_reg[23];
  assign Delay13_reg_next[25] = Delay13_reg[24];
  assign Delay13_reg_next[26] = Delay13_reg[25];
  assign Delay13_reg_next[27] = Delay13_reg[26];
  assign Delay13_reg_next[28] = Delay13_reg[27];
  assign Delay13_reg_next[29] = Delay13_reg[28];
  assign Delay13_reg_next[30] = Delay13_reg[29];
  assign Delay13_reg_next[31] = Delay13_reg[30];
  assign Delay13_reg_next[32] = Delay13_reg[31];
  assign Delay13_reg_next[33] = Delay13_reg[32];
  assign Delay13_reg_next[34] = Delay13_reg[33];
  assign Delay13_reg_next[35] = Delay13_reg[34];
  assign Delay13_reg_next[36] = Delay13_reg[35];
  assign Delay13_reg_next[37] = Delay13_reg[36];
  assign Delay13_reg_next[38] = Delay13_reg[37];
  assign Delay13_reg_next[39] = Delay13_reg[38];
  assign Delay13_reg_next[40] = Delay13_reg[39];
  assign Delay13_reg_next[41] = Delay13_reg[40];
  assign Delay13_reg_next[42] = Delay13_reg[41];
  assign Delay13_reg_next[43] = Delay13_reg[42];
  assign Delay13_reg_next[44] = Delay13_reg[43];
  assign Delay13_reg_next[45] = Delay13_reg[44];
  assign Delay13_reg_next[46] = Delay13_reg[45];
  assign Delay13_reg_next[47] = Delay13_reg[46];
  assign Delay13_reg_next[48] = Delay13_reg[47];
  assign Delay13_reg_next[49] = Delay13_reg[48];
  assign Delay13_reg_next[50] = Delay13_reg[49];
  assign Delay13_reg_next[51] = Delay13_reg[50];
  assign Delay13_reg_next[52] = Delay13_reg[51];
  assign Delay13_reg_next[53] = Delay13_reg[52];
  assign Delay13_reg_next[54] = Delay13_reg[53];
  assign Delay13_reg_next[55] = Delay13_reg[54];
  assign Delay13_reg_next[56] = Delay13_reg[55];
  assign Delay13_reg_next[57] = Delay13_reg[56];
  assign Delay13_reg_next[58] = Delay13_reg[57];
  assign Delay13_reg_next[59] = Delay13_reg[58];
  assign Delay13_reg_next[60] = Delay13_reg[59];
  assign Delay13_reg_next[61] = Delay13_reg[60];
  assign Delay13_reg_next[62] = Delay13_reg[61];



  Detect_Increase_block5 u_Detect_Increase (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .U(Delay13_out1),
                                            .Y(Detect_Increase_out1)
                                            );

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Delay13_out1;
        end
      end
    end



  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : HDL_Counter6_process
      if (reset == 1'b1) begin
        HDL_Counter6_out1 <= 7'b0000000;
      end
      else begin
        if (enb) begin
          if (Detect_Increase_out1 == 1'b1) begin
            HDL_Counter6_out1 <= 7'b0000000;
          end
          else if (Delay_out1 == 1'b1) begin
            HDL_Counter6_out1 <= HDL_Counter6_out1 + 7'b0000001;
          end
        end
      end
    end



  assign Multiply5_cast = {1'b0, {HDL_Counter6_out1, 6'b000000}};
  assign Multiply5_out1 = Multiply5_cast[12];



  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_reg[0] <= 1'b0;
        Delay12_reg[1] <= 1'b0;
        Delay12_reg[2] <= 1'b0;
        Delay12_reg[3] <= 1'b0;
        Delay12_reg[4] <= 1'b0;
        Delay12_reg[5] <= 1'b0;
        Delay12_reg[6] <= 1'b0;
        Delay12_reg[7] <= 1'b0;
        Delay12_reg[8] <= 1'b0;
        Delay12_reg[9] <= 1'b0;
        Delay12_reg[10] <= 1'b0;
        Delay12_reg[11] <= 1'b0;
        Delay12_reg[12] <= 1'b0;
        Delay12_reg[13] <= 1'b0;
        Delay12_reg[14] <= 1'b0;
        Delay12_reg[15] <= 1'b0;
        Delay12_reg[16] <= 1'b0;
        Delay12_reg[17] <= 1'b0;
        Delay12_reg[18] <= 1'b0;
        Delay12_reg[19] <= 1'b0;
        Delay12_reg[20] <= 1'b0;
        Delay12_reg[21] <= 1'b0;
        Delay12_reg[22] <= 1'b0;
        Delay12_reg[23] <= 1'b0;
        Delay12_reg[24] <= 1'b0;
        Delay12_reg[25] <= 1'b0;
        Delay12_reg[26] <= 1'b0;
        Delay12_reg[27] <= 1'b0;
        Delay12_reg[28] <= 1'b0;
        Delay12_reg[29] <= 1'b0;
        Delay12_reg[30] <= 1'b0;
        Delay12_reg[31] <= 1'b0;
        Delay12_reg[32] <= 1'b0;
        Delay12_reg[33] <= 1'b0;
        Delay12_reg[34] <= 1'b0;
        Delay12_reg[35] <= 1'b0;
        Delay12_reg[36] <= 1'b0;
        Delay12_reg[37] <= 1'b0;
        Delay12_reg[38] <= 1'b0;
        Delay12_reg[39] <= 1'b0;
        Delay12_reg[40] <= 1'b0;
        Delay12_reg[41] <= 1'b0;
        Delay12_reg[42] <= 1'b0;
        Delay12_reg[43] <= 1'b0;
        Delay12_reg[44] <= 1'b0;
        Delay12_reg[45] <= 1'b0;
        Delay12_reg[46] <= 1'b0;
        Delay12_reg[47] <= 1'b0;
        Delay12_reg[48] <= 1'b0;
        Delay12_reg[49] <= 1'b0;
        Delay12_reg[50] <= 1'b0;
        Delay12_reg[51] <= 1'b0;
        Delay12_reg[52] <= 1'b0;
        Delay12_reg[53] <= 1'b0;
        Delay12_reg[54] <= 1'b0;
        Delay12_reg[55] <= 1'b0;
        Delay12_reg[56] <= 1'b0;
        Delay12_reg[57] <= 1'b0;
        Delay12_reg[58] <= 1'b0;
        Delay12_reg[59] <= 1'b0;
        Delay12_reg[60] <= 1'b0;
        Delay12_reg[61] <= 1'b0;
        Delay12_reg[62] <= 1'b0;
        Delay12_reg[63] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay12_reg[0] <= Delay12_reg_next[0];
          Delay12_reg[1] <= Delay12_reg_next[1];
          Delay12_reg[2] <= Delay12_reg_next[2];
          Delay12_reg[3] <= Delay12_reg_next[3];
          Delay12_reg[4] <= Delay12_reg_next[4];
          Delay12_reg[5] <= Delay12_reg_next[5];
          Delay12_reg[6] <= Delay12_reg_next[6];
          Delay12_reg[7] <= Delay12_reg_next[7];
          Delay12_reg[8] <= Delay12_reg_next[8];
          Delay12_reg[9] <= Delay12_reg_next[9];
          Delay12_reg[10] <= Delay12_reg_next[10];
          Delay12_reg[11] <= Delay12_reg_next[11];
          Delay12_reg[12] <= Delay12_reg_next[12];
          Delay12_reg[13] <= Delay12_reg_next[13];
          Delay12_reg[14] <= Delay12_reg_next[14];
          Delay12_reg[15] <= Delay12_reg_next[15];
          Delay12_reg[16] <= Delay12_reg_next[16];
          Delay12_reg[17] <= Delay12_reg_next[17];
          Delay12_reg[18] <= Delay12_reg_next[18];
          Delay12_reg[19] <= Delay12_reg_next[19];
          Delay12_reg[20] <= Delay12_reg_next[20];
          Delay12_reg[21] <= Delay12_reg_next[21];
          Delay12_reg[22] <= Delay12_reg_next[22];
          Delay12_reg[23] <= Delay12_reg_next[23];
          Delay12_reg[24] <= Delay12_reg_next[24];
          Delay12_reg[25] <= Delay12_reg_next[25];
          Delay12_reg[26] <= Delay12_reg_next[26];
          Delay12_reg[27] <= Delay12_reg_next[27];
          Delay12_reg[28] <= Delay12_reg_next[28];
          Delay12_reg[29] <= Delay12_reg_next[29];
          Delay12_reg[30] <= Delay12_reg_next[30];
          Delay12_reg[31] <= Delay12_reg_next[31];
          Delay12_reg[32] <= Delay12_reg_next[32];
          Delay12_reg[33] <= Delay12_reg_next[33];
          Delay12_reg[34] <= Delay12_reg_next[34];
          Delay12_reg[35] <= Delay12_reg_next[35];
          Delay12_reg[36] <= Delay12_reg_next[36];
          Delay12_reg[37] <= Delay12_reg_next[37];
          Delay12_reg[38] <= Delay12_reg_next[38];
          Delay12_reg[39] <= Delay12_reg_next[39];
          Delay12_reg[40] <= Delay12_reg_next[40];
          Delay12_reg[41] <= Delay12_reg_next[41];
          Delay12_reg[42] <= Delay12_reg_next[42];
          Delay12_reg[43] <= Delay12_reg_next[43];
          Delay12_reg[44] <= Delay12_reg_next[44];
          Delay12_reg[45] <= Delay12_reg_next[45];
          Delay12_reg[46] <= Delay12_reg_next[46];
          Delay12_reg[47] <= Delay12_reg_next[47];
          Delay12_reg[48] <= Delay12_reg_next[48];
          Delay12_reg[49] <= Delay12_reg_next[49];
          Delay12_reg[50] <= Delay12_reg_next[50];
          Delay12_reg[51] <= Delay12_reg_next[51];
          Delay12_reg[52] <= Delay12_reg_next[52];
          Delay12_reg[53] <= Delay12_reg_next[53];
          Delay12_reg[54] <= Delay12_reg_next[54];
          Delay12_reg[55] <= Delay12_reg_next[55];
          Delay12_reg[56] <= Delay12_reg_next[56];
          Delay12_reg[57] <= Delay12_reg_next[57];
          Delay12_reg[58] <= Delay12_reg_next[58];
          Delay12_reg[59] <= Delay12_reg_next[59];
          Delay12_reg[60] <= Delay12_reg_next[60];
          Delay12_reg[61] <= Delay12_reg_next[61];
          Delay12_reg[62] <= Delay12_reg_next[62];
          Delay12_reg[63] <= Delay12_reg_next[63];
        end
      end
    end

  assign Delay12_out1 = Delay12_reg[63];
  assign Delay12_reg_next[0] = dataIn;
  assign Delay12_reg_next[1] = Delay12_reg[0];
  assign Delay12_reg_next[2] = Delay12_reg[1];
  assign Delay12_reg_next[3] = Delay12_reg[2];
  assign Delay12_reg_next[4] = Delay12_reg[3];
  assign Delay12_reg_next[5] = Delay12_reg[4];
  assign Delay12_reg_next[6] = Delay12_reg[5];
  assign Delay12_reg_next[7] = Delay12_reg[6];
  assign Delay12_reg_next[8] = Delay12_reg[7];
  assign Delay12_reg_next[9] = Delay12_reg[8];
  assign Delay12_reg_next[10] = Delay12_reg[9];
  assign Delay12_reg_next[11] = Delay12_reg[10];
  assign Delay12_reg_next[12] = Delay12_reg[11];
  assign Delay12_reg_next[13] = Delay12_reg[12];
  assign Delay12_reg_next[14] = Delay12_reg[13];
  assign Delay12_reg_next[15] = Delay12_reg[14];
  assign Delay12_reg_next[16] = Delay12_reg[15];
  assign Delay12_reg_next[17] = Delay12_reg[16];
  assign Delay12_reg_next[18] = Delay12_reg[17];
  assign Delay12_reg_next[19] = Delay12_reg[18];
  assign Delay12_reg_next[20] = Delay12_reg[19];
  assign Delay12_reg_next[21] = Delay12_reg[20];
  assign Delay12_reg_next[22] = Delay12_reg[21];
  assign Delay12_reg_next[23] = Delay12_reg[22];
  assign Delay12_reg_next[24] = Delay12_reg[23];
  assign Delay12_reg_next[25] = Delay12_reg[24];
  assign Delay12_reg_next[26] = Delay12_reg[25];
  assign Delay12_reg_next[27] = Delay12_reg[26];
  assign Delay12_reg_next[28] = Delay12_reg[27];
  assign Delay12_reg_next[29] = Delay12_reg[28];
  assign Delay12_reg_next[30] = Delay12_reg[29];
  assign Delay12_reg_next[31] = Delay12_reg[30];
  assign Delay12_reg_next[32] = Delay12_reg[31];
  assign Delay12_reg_next[33] = Delay12_reg[32];
  assign Delay12_reg_next[34] = Delay12_reg[33];
  assign Delay12_reg_next[35] = Delay12_reg[34];
  assign Delay12_reg_next[36] = Delay12_reg[35];
  assign Delay12_reg_next[37] = Delay12_reg[36];
  assign Delay12_reg_next[38] = Delay12_reg[37];
  assign Delay12_reg_next[39] = Delay12_reg[38];
  assign Delay12_reg_next[40] = Delay12_reg[39];
  assign Delay12_reg_next[41] = Delay12_reg[40];
  assign Delay12_reg_next[42] = Delay12_reg[41];
  assign Delay12_reg_next[43] = Delay12_reg[42];
  assign Delay12_reg_next[44] = Delay12_reg[43];
  assign Delay12_reg_next[45] = Delay12_reg[44];
  assign Delay12_reg_next[46] = Delay12_reg[45];
  assign Delay12_reg_next[47] = Delay12_reg[46];
  assign Delay12_reg_next[48] = Delay12_reg[47];
  assign Delay12_reg_next[49] = Delay12_reg[48];
  assign Delay12_reg_next[50] = Delay12_reg[49];
  assign Delay12_reg_next[51] = Delay12_reg[50];
  assign Delay12_reg_next[52] = Delay12_reg[51];
  assign Delay12_reg_next[53] = Delay12_reg[52];
  assign Delay12_reg_next[54] = Delay12_reg[53];
  assign Delay12_reg_next[55] = Delay12_reg[54];
  assign Delay12_reg_next[56] = Delay12_reg[55];
  assign Delay12_reg_next[57] = Delay12_reg[56];
  assign Delay12_reg_next[58] = Delay12_reg[57];
  assign Delay12_reg_next[59] = Delay12_reg[58];
  assign Delay12_reg_next[60] = Delay12_reg[59];
  assign Delay12_reg_next[61] = Delay12_reg[60];
  assign Delay12_reg_next[62] = Delay12_reg[61];
  assign Delay12_reg_next[63] = Delay12_reg[62];



  assign XOR6_out1 = dataIn ^ Delay12_out1;



  assign Multiport_Switch6_out1 = (Multiply5_out1 == 1'b0 ? XOR6_out1 :
              Delay12_out1);



  assign dataOut = Multiport_Switch6_out1;

  assign validOut = Delay_out1;

endmodule  // Stage_6


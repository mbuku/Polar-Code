// -------------------------------------------------------------
// 
// File Name: hdlsrc\NRPolarEncodeHDL\Stage_1.v
// Created: 2022-01-15 05:10:41
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Stage_1
// Source Path: NRPolarEncodeHDL/HDL Algorithm/NR Polar Encoder/encode/Stage 1
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Stage_1
          (clk,
           reset,
           enb,
           dataIn,
           validIn,
           dataOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;  // ufix1
  input   validIn;
  output  dataOut;  // ufix1
  output  validOut;


  reg  Delay3_out1;
  wire Detect_Increase_out1;
  reg  Delay1_out1;
  reg [1:0] HDL_Counter1_out1;  // ufix2
  wire [3:0] Multiply_cast;  // ufix4_En2
  wire Multiply_out1;  // ufix1
  reg  [0:1] Delay2_reg;  // ufix1 [2]
  wire [0:1] Delay2_reg_next;  // ufix1 [2]
  wire Delay2_out1;  // ufix1
  wire XOR1_out1;  // ufix1
  wire Multiport_Switch1_out1;  // ufix1


  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= validIn;
        end
      end
    end



  Detect_Increase_block u_Detect_Increase (.clk(clk),
                                           .reset(reset),
                                           .enb(enb),
                                           .U(Delay3_out1),
                                           .Y(Detect_Increase_out1)
                                           );

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Delay3_out1;
        end
      end
    end



  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : HDL_Counter1_process
      if (reset == 1'b1) begin
        HDL_Counter1_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          if (Detect_Increase_out1 == 1'b1) begin
            HDL_Counter1_out1 <= 2'b00;
          end
          else if (Delay1_out1 == 1'b1) begin
            HDL_Counter1_out1 <= HDL_Counter1_out1 + 2'b01;
          end
        end
      end
    end



  assign Multiply_cast = {1'b0, {HDL_Counter1_out1, 1'b0}};
  assign Multiply_out1 = Multiply_cast[2];



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_reg[0] <= 1'b0;
        Delay2_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= Delay2_reg_next[0];
          Delay2_reg[1] <= Delay2_reg_next[1];
        end
      end
    end

  assign Delay2_out1 = Delay2_reg[1];
  assign Delay2_reg_next[0] = dataIn;
  assign Delay2_reg_next[1] = Delay2_reg[0];



  assign XOR1_out1 = dataIn ^ Delay2_out1;



  assign Multiport_Switch1_out1 = (Multiply_out1 == 1'b0 ? XOR1_out1 :
              Delay2_out1);



  assign dataOut = Multiport_Switch1_out1;

  assign validOut = Delay1_out1;

endmodule  // Stage_1


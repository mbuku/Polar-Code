// -------------------------------------------------------------
// 
// File Name: hdlsrc\NRPolarEncodeHDL\Stage_0.v
// Created: 2022-01-15 05:10:41
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Stage_0
// Source Path: NRPolarEncodeHDL/HDL Algorithm/NR Polar Encoder/encode/Stage 0
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Stage_0
          (clk,
           reset,
           enb,
           dataIn,
           validIn,
           dataOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;  // ufix1
  input   validIn;
  output  dataOut;  // ufix1
  output  validOut;


  wire Detect_Increase_out1;
  reg  Delay1_out1;
  reg  HDL_Counter_out1;  // ufix1
  reg  Delay_out1;  // ufix1
  wire XOR_out1;  // ufix1
  wire Multiport_Switch_out1;  // ufix1


  Detect_Increase u_Detect_Increase (.clk(clk),
                                     .reset(reset),
                                     .enb(enb),
                                     .U(validIn),
                                     .Y(Detect_Increase_out1)
                                     );

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= validIn;
        end
      end
    end



  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (Detect_Increase_out1 == 1'b1) begin
            HDL_Counter_out1 <= 1'b0;
          end
          else if (Delay1_out1 == 1'b1) begin
            HDL_Counter_out1 <=  ~ HDL_Counter_out1;
          end
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= dataIn;
        end
      end
    end



  assign XOR_out1 = dataIn ^ Delay_out1;



  assign Multiport_Switch_out1 = (HDL_Counter_out1 == 1'b0 ? XOR_out1 :
              Delay_out1);



  assign dataOut = Multiport_Switch_out1;

  assign validOut = Delay1_out1;

endmodule  // Stage_0


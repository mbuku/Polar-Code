// -------------------------------------------------------------
// 
// File Name: hdlsrc\NRPolarEncodeHDL\encode.v
// Created: 2022-01-15 05:10:42
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: encode
// Source Path: NRPolarEncodeHDL/HDL Algorithm/NR Polar Encoder/encode
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module encode
          (clk,
           reset,
           enb,
           dataIn,
           validIn,
           n,
           rstCore,
           dataOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;  // ufix1
  input   validIn;
  input   [7:0] n;  // uint8
  input   rstCore;
  output  dataOut;  // ufix1
  output  validOut;


  reg [7:0] Delay3_out1;  // uint8
  wire [2:0] Constant_out1;  // ufix3
  wire [2:0] Subtract_sub_cast;  // ufix3
  wire [2:0] Subtract_sub_temp;  // ufix3
  wire [7:0] Subtract_out1;  // uint8
  reg  [0:1] Delay21_reg;  // ufix1 [2]
  wire [0:1] Delay21_reg_next;  // ufix1 [2]
  wire Delay21_out1;  // ufix1
  reg  [0:1] Delay20_reg;  // ufix1 [2]
  wire [0:1] Delay20_reg_next;  // ufix1 [2]
  wire Delay20_out1;
  wire Stage_0_out1;  // ufix1
  wire Stage_0_out2;
  reg  Delay22_out1;  // ufix1
  reg  Delay23_out1;
  wire Stage_1_out1;  // ufix1
  wire Stage_1_out2;
  reg  Delay24_out1;  // ufix1
  reg  Delay25_out1;
  wire Stage_2_out1;  // ufix1
  wire Stage_2_out2;
  reg  Delay27_out1;  // ufix1
  reg  Delay26_out1;
  wire Stage_3_out1;  // ufix1
  wire Stage_3_out2;
  reg  Delay28_out1;  // ufix1
  reg  Delay29_out1;
  wire Stage_4_out1;  // ufix1
  wire Stage_4_out2;
  reg  Delay30_out1;  // ufix1
  reg  Delay31_out1;
  wire Stage_5_out1;  // ufix1
  wire Stage_5_out2;
  reg  Delay32_out1;  // ufix1
  reg  Delay33_out1;
  wire Stage_6_out1;  // ufix1
  wire Stage_6_out2;
  reg  Delay34_out1;  // ufix1
  reg  Delay35_out1;
  wire Stage_7_out1;  // ufix1
  wire Stage_7_out2;
  reg  Delay36_out1;  // ufix1
  reg  Delay37_out1;
  wire Stage_8_out1;  // ufix1
  wire Stage_8_out2;
  reg  Delay38_out1;  // ufix1
  reg  Delay39_out1;
  wire Stage_9_out1;  // ufix1
  wire Stage_9_out2;
  reg  Delay2_out1;  // ufix1
  wire Multiport_Switch_out1;  // ufix1
  reg  Delay40_out1;  // ufix1
  wire validOut_1;
  wire MATLAB_Function1_out1;
  wire MATLAB_Function2_out1;
  wire MATLAB_Function3_out1;
  wire MATLAB_Function4_out1;
  reg  Delay1_out1;
  wire MATLAB_Function5_out1;
  wire Multiport_Switch1_out1;
  reg  Delay41_out1;


  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= n;
        end
      end
    end



  assign Constant_out1 = 3'b101;



  assign Subtract_sub_cast = Delay3_out1[2:0];
  assign Subtract_sub_temp = Subtract_sub_cast - Constant_out1;
  assign Subtract_out1 = {5'b0, Subtract_sub_temp};



  always @(posedge clk or posedge reset)
    begin : Delay21_process
      if (reset == 1'b1) begin
        Delay21_reg[0] <= 1'b0;
        Delay21_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay21_reg[0] <= Delay21_reg_next[0];
          Delay21_reg[1] <= Delay21_reg_next[1];
        end
      end
    end

  assign Delay21_out1 = Delay21_reg[1];
  assign Delay21_reg_next[0] = dataIn;
  assign Delay21_reg_next[1] = Delay21_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay20_process
      if (reset == 1'b1) begin
        Delay20_reg[0] <= 1'b0;
        Delay20_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay20_reg[0] <= Delay20_reg_next[0];
          Delay20_reg[1] <= Delay20_reg_next[1];
        end
      end
    end

  assign Delay20_out1 = Delay20_reg[1];
  assign Delay20_reg_next[0] = validIn;
  assign Delay20_reg_next[1] = Delay20_reg[0];



  Stage_0 u_Stage_0 (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .dataIn(Delay21_out1),  // ufix1
                     .validIn(Delay20_out1),
                     .dataOut(Stage_0_out1),  // ufix1
                     .validOut(Stage_0_out2)
                     );

  always @(posedge clk or posedge reset)
    begin : Delay22_process
      if (reset == 1'b1) begin
        Delay22_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay22_out1 <= Stage_0_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay23_process
      if (reset == 1'b1) begin
        Delay23_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay23_out1 <= Stage_0_out2;
        end
      end
    end



  Stage_1 u_Stage_1 (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .dataIn(Delay22_out1),  // ufix1
                     .validIn(Delay23_out1),
                     .dataOut(Stage_1_out1),  // ufix1
                     .validOut(Stage_1_out2)
                     );

  always @(posedge clk or posedge reset)
    begin : Delay24_process
      if (reset == 1'b1) begin
        Delay24_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay24_out1 <= Stage_1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay25_process
      if (reset == 1'b1) begin
        Delay25_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay25_out1 <= Stage_1_out2;
        end
      end
    end



  Stage_2 u_Stage_2 (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .dataIn(Delay24_out1),  // ufix1
                     .validIn(Delay25_out1),
                     .dataOut(Stage_2_out1),  // ufix1
                     .validOut(Stage_2_out2)
                     );

  always @(posedge clk or posedge reset)
    begin : Delay27_process
      if (reset == 1'b1) begin
        Delay27_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay27_out1 <= Stage_2_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay26_process
      if (reset == 1'b1) begin
        Delay26_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay26_out1 <= Stage_2_out2;
        end
      end
    end



  Stage_3 u_Stage_3 (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .dataIn(Delay27_out1),  // ufix1
                     .validIn(Delay26_out1),
                     .dataOut(Stage_3_out1),  // ufix1
                     .validOut(Stage_3_out2)
                     );

  always @(posedge clk or posedge reset)
    begin : Delay28_process
      if (reset == 1'b1) begin
        Delay28_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay28_out1 <= Stage_3_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay29_process
      if (reset == 1'b1) begin
        Delay29_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay29_out1 <= Stage_3_out2;
        end
      end
    end



  Stage_4 u_Stage_4 (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .dataIn(Delay28_out1),  // ufix1
                     .validIn(Delay29_out1),
                     .dataOut(Stage_4_out1),  // ufix1
                     .validOut(Stage_4_out2)
                     );

  always @(posedge clk or posedge reset)
    begin : Delay30_process
      if (reset == 1'b1) begin
        Delay30_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay30_out1 <= Stage_4_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay31_process
      if (reset == 1'b1) begin
        Delay31_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay31_out1 <= Stage_4_out2;
        end
      end
    end



  Stage_5 u_Stage_5 (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .dataIn(Delay30_out1),  // ufix1
                     .validIn(Delay31_out1),
                     .dataOut(Stage_5_out1),  // ufix1
                     .validOut(Stage_5_out2)
                     );

  always @(posedge clk or posedge reset)
    begin : Delay32_process
      if (reset == 1'b1) begin
        Delay32_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay32_out1 <= Stage_5_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay33_process
      if (reset == 1'b1) begin
        Delay33_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay33_out1 <= Stage_5_out2;
        end
      end
    end



  Stage_6 u_Stage_6 (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .dataIn(Delay32_out1),  // ufix1
                     .validIn(Delay33_out1),
                     .dataOut(Stage_6_out1),  // ufix1
                     .validOut(Stage_6_out2)
                     );

  always @(posedge clk or posedge reset)
    begin : Delay34_process
      if (reset == 1'b1) begin
        Delay34_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay34_out1 <= Stage_6_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay35_process
      if (reset == 1'b1) begin
        Delay35_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay35_out1 <= Stage_6_out2;
        end
      end
    end



  Stage_7 u_Stage_7 (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .dataIn(Delay34_out1),  // ufix1
                     .validIn(Delay35_out1),
                     .dataOut(Stage_7_out1),  // ufix1
                     .validOut(Stage_7_out2)
                     );

  always @(posedge clk or posedge reset)
    begin : Delay36_process
      if (reset == 1'b1) begin
        Delay36_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay36_out1 <= Stage_7_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay37_process
      if (reset == 1'b1) begin
        Delay37_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay37_out1 <= Stage_7_out2;
        end
      end
    end



  Stage_8 u_Stage_8 (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .dataIn(Delay36_out1),  // ufix1
                     .validIn(Delay37_out1),
                     .dataOut(Stage_8_out1),  // ufix1
                     .validOut(Stage_8_out2)
                     );

  always @(posedge clk or posedge reset)
    begin : Delay38_process
      if (reset == 1'b1) begin
        Delay38_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay38_out1 <= Stage_8_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay39_process
      if (reset == 1'b1) begin
        Delay39_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay39_out1 <= Stage_8_out2;
        end
      end
    end



  Stage_9_block u_Stage_9 (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .dataIn(Delay38_out1),  // ufix1
                           .validIn(Delay39_out1),
                           .dataOut(Stage_9_out1),  // ufix1
                           .validOut(Stage_9_out2)
                           );

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Stage_9_out1;
        end
      end
    end



  assign Multiport_Switch_out1 = (Subtract_out1 == 8'b00000000 ? Delay30_out1 :
              (Subtract_out1 == 8'b00000001 ? Delay32_out1 :
              (Subtract_out1 == 8'b00000010 ? Delay34_out1 :
              (Subtract_out1 == 8'b00000011 ? Delay36_out1 :
              (Subtract_out1 == 8'b00000100 ? Delay38_out1 :
              Delay2_out1)))));



  always @(posedge clk or posedge reset)
    begin : Delay40_process
      if (reset == 1'b1) begin
        Delay40_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay40_out1 <= Multiport_Switch_out1;
        end
      end
    end



  assign dataOut = Delay40_out1;

  MATLAB_Function u_MATLAB_Function (.clk(clk),
                                     .reset(reset),
                                     .enb(enb),
                                     .validIn(Delay31_out1),
                                     .rst(rstCore),
                                     .validOut(validOut_1)
                                     );

  MATLAB_Function u_MATLAB_Function1 (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .validIn(Delay33_out1),
                                      .rst(rstCore),
                                      .validOut(MATLAB_Function1_out1)
                                      );

  MATLAB_Function u_MATLAB_Function2 (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .validIn(Delay35_out1),
                                      .rst(rstCore),
                                      .validOut(MATLAB_Function2_out1)
                                      );

  MATLAB_Function u_MATLAB_Function3 (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .validIn(Delay37_out1),
                                      .rst(rstCore),
                                      .validOut(MATLAB_Function3_out1)
                                      );

  MATLAB_Function u_MATLAB_Function4 (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .validIn(Delay39_out1),
                                      .rst(rstCore),
                                      .validOut(MATLAB_Function4_out1)
                                      );

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Stage_9_out2;
        end
      end
    end



  MATLAB_Function u_MATLAB_Function5 (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .validIn(Delay1_out1),
                                      .rst(rstCore),
                                      .validOut(MATLAB_Function5_out1)
                                      );

  assign Multiport_Switch1_out1 = (Subtract_out1 == 8'b00000000 ? validOut_1 :
              (Subtract_out1 == 8'b00000001 ? MATLAB_Function1_out1 :
              (Subtract_out1 == 8'b00000010 ? MATLAB_Function2_out1 :
              (Subtract_out1 == 8'b00000011 ? MATLAB_Function3_out1 :
              (Subtract_out1 == 8'b00000100 ? MATLAB_Function4_out1 :
              MATLAB_Function5_out1)))));



  always @(posedge clk or posedge reset)
    begin : Delay41_process
      if (reset == 1'b1) begin
        Delay41_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay41_out1 <= Multiport_Switch1_out1;
        end
      end
    end



  assign validOut = Delay41_out1;

endmodule  // encode


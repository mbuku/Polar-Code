// -------------------------------------------------------------
// 
// File Name: hdlsrc\NRPolarEncodeHDL\Stage_3.v
// Created: 2022-01-15 05:10:41
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Stage_3
// Source Path: NRPolarEncodeHDL/HDL Algorithm/NR Polar Encoder/encode/Stage 3
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Stage_3
          (clk,
           reset,
           enb,
           dataIn,
           validIn,
           dataOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;  // ufix1
  input   validIn;
  output  dataOut;  // ufix1
  output  validOut;


  reg  [0:6] Delay7_reg;  // ufix1 [7]
  wire [0:6] Delay7_reg_next;  // ufix1 [7]
  wire Delay7_out1;
  wire Detect_Increase_out1;
  reg  Delay_out1;
  reg [3:0] HDL_Counter3_out1;  // ufix4
  wire [7:0] Multiply2_cast;  // ufix8_En6
  wire Multiply2_out1;  // ufix1
  reg  [0:7] Delay6_reg;  // ufix1 [8]
  wire [0:7] Delay6_reg_next;  // ufix1 [8]
  wire Delay6_out1;  // ufix1
  wire XOR3_out1;  // ufix1
  wire Multiport_Switch3_out1;  // ufix1


  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_reg[0] <= 1'b0;
        Delay7_reg[1] <= 1'b0;
        Delay7_reg[2] <= 1'b0;
        Delay7_reg[3] <= 1'b0;
        Delay7_reg[4] <= 1'b0;
        Delay7_reg[5] <= 1'b0;
        Delay7_reg[6] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_reg[0] <= Delay7_reg_next[0];
          Delay7_reg[1] <= Delay7_reg_next[1];
          Delay7_reg[2] <= Delay7_reg_next[2];
          Delay7_reg[3] <= Delay7_reg_next[3];
          Delay7_reg[4] <= Delay7_reg_next[4];
          Delay7_reg[5] <= Delay7_reg_next[5];
          Delay7_reg[6] <= Delay7_reg_next[6];
        end
      end
    end

  assign Delay7_out1 = Delay7_reg[6];
  assign Delay7_reg_next[0] = validIn;
  assign Delay7_reg_next[1] = Delay7_reg[0];
  assign Delay7_reg_next[2] = Delay7_reg[1];
  assign Delay7_reg_next[3] = Delay7_reg[2];
  assign Delay7_reg_next[4] = Delay7_reg[3];
  assign Delay7_reg_next[5] = Delay7_reg[4];
  assign Delay7_reg_next[6] = Delay7_reg[5];



  Detect_Increase_block2 u_Detect_Increase (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .U(Delay7_out1),
                                            .Y(Detect_Increase_out1)
                                            );

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Delay7_out1;
        end
      end
    end



  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : HDL_Counter3_process
      if (reset == 1'b1) begin
        HDL_Counter3_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          if (Detect_Increase_out1 == 1'b1) begin
            HDL_Counter3_out1 <= 4'b0000;
          end
          else if (Delay_out1 == 1'b1) begin
            HDL_Counter3_out1 <= HDL_Counter3_out1 + 4'b0001;
          end
        end
      end
    end



  assign Multiply2_cast = {1'b0, {HDL_Counter3_out1, 3'b000}};
  assign Multiply2_out1 = Multiply2_cast[6];



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_reg[0] <= 1'b0;
        Delay6_reg[1] <= 1'b0;
        Delay6_reg[2] <= 1'b0;
        Delay6_reg[3] <= 1'b0;
        Delay6_reg[4] <= 1'b0;
        Delay6_reg[5] <= 1'b0;
        Delay6_reg[6] <= 1'b0;
        Delay6_reg[7] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_reg[0] <= Delay6_reg_next[0];
          Delay6_reg[1] <= Delay6_reg_next[1];
          Delay6_reg[2] <= Delay6_reg_next[2];
          Delay6_reg[3] <= Delay6_reg_next[3];
          Delay6_reg[4] <= Delay6_reg_next[4];
          Delay6_reg[5] <= Delay6_reg_next[5];
          Delay6_reg[6] <= Delay6_reg_next[6];
          Delay6_reg[7] <= Delay6_reg_next[7];
        end
      end
    end

  assign Delay6_out1 = Delay6_reg[7];
  assign Delay6_reg_next[0] = dataIn;
  assign Delay6_reg_next[1] = Delay6_reg[0];
  assign Delay6_reg_next[2] = Delay6_reg[1];
  assign Delay6_reg_next[3] = Delay6_reg[2];
  assign Delay6_reg_next[4] = Delay6_reg[3];
  assign Delay6_reg_next[5] = Delay6_reg[4];
  assign Delay6_reg_next[6] = Delay6_reg[5];
  assign Delay6_reg_next[7] = Delay6_reg[6];



  assign XOR3_out1 = dataIn ^ Delay6_out1;



  assign Multiport_Switch3_out1 = (Multiply2_out1 == 1'b0 ? XOR3_out1 :
              Delay6_out1);



  assign dataOut = Multiport_Switch3_out1;

  assign validOut = Delay_out1;

endmodule  // Stage_3


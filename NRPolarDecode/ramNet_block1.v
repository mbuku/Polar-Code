// -------------------------------------------------------------
// 
// File Name: hdlsrc\NRPolarDecodeHDL\ramNet_block1.v
// Created: 2022-01-15 05:13:24
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: ramNet_block1
// Source Path: NRPolarDecodeHDL/HDL Algorithm/NR Polar Decoder/TreeMemory/ramNet
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module ramNet_block1
          (clk,
           reset,
           enb,
           din,
           wr_addr,
           wr_en,
           rd_addr,
           dout);


  input   clk;
  input   reset;
  input   enb;
  input   [3:0] din;  // ufix4
  input   wr_addr;  // ufix1
  input   wr_en;
  input   rd_addr;  // ufix1
  output  [3:0] dout;  // ufix4


  wire addrComp_0;
  wire wr_0;
  reg [3:0] ramData_0;  // ufix4
  wire addrComp_1;
  wire wr_1;
  reg [3:0] ramData_1;  // ufix4
  wire [3:0] ramDataSel;  // ufix4
  reg [3:0] dout_1;  // ufix4


  assign addrComp_0 = wr_addr == 1'b0;



  assign wr_0 = addrComp_0 & wr_en;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        ramData_0 <= 4'b0000;
      end
      else begin
        if (enb && wr_0) begin
          ramData_0 <= din;
        end
      end
    end



  assign addrComp_1 = wr_addr == 1'b1;



  assign wr_1 = addrComp_1 & wr_en;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        ramData_1 <= 4'b0000;
      end
      else begin
        if (enb && wr_1) begin
          ramData_1 <= din;
        end
      end
    end



  assign ramDataSel = (rd_addr == 1'b0 ? ramData_0 :
              ramData_1);



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        dout_1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          dout_1 <= ramDataSel;
        end
      end
    end



  assign dout = dout_1;

endmodule  // ramNet_block1


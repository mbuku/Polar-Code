// -------------------------------------------------------------
// 
// File Name: hdlsrc\NRPolarEncodeHDL\Stage_4.v
// Created: 2022-01-15 05:10:41
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Stage_4
// Source Path: NRPolarEncodeHDL/HDL Algorithm/NR Polar Encoder/encode/Stage 4
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Stage_4
          (clk,
           reset,
           enb,
           dataIn,
           validIn,
           dataOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;  // ufix1
  input   validIn;
  output  dataOut;  // ufix1
  output  validOut;


  reg  [0:14] Delay9_reg;  // ufix1 [15]
  wire [0:14] Delay9_reg_next;  // ufix1 [15]
  wire Delay9_out1;
  wire Detect_Increase_out1;
  reg  Delay_out1;
  reg [4:0] HDL_Counter4_out1;  // ufix5
  wire [9:0] Multiply3_cast;  // ufix10_En8
  wire Multiply3_out1;  // ufix1
  reg  [0:15] Delay8_reg;  // ufix1 [16]
  wire [0:15] Delay8_reg_next;  // ufix1 [16]
  wire Delay8_out1;  // ufix1
  wire XOR4_out1;  // ufix1
  wire Multiport_Switch4_out1;  // ufix1


  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_reg[0] <= 1'b0;
        Delay9_reg[1] <= 1'b0;
        Delay9_reg[2] <= 1'b0;
        Delay9_reg[3] <= 1'b0;
        Delay9_reg[4] <= 1'b0;
        Delay9_reg[5] <= 1'b0;
        Delay9_reg[6] <= 1'b0;
        Delay9_reg[7] <= 1'b0;
        Delay9_reg[8] <= 1'b0;
        Delay9_reg[9] <= 1'b0;
        Delay9_reg[10] <= 1'b0;
        Delay9_reg[11] <= 1'b0;
        Delay9_reg[12] <= 1'b0;
        Delay9_reg[13] <= 1'b0;
        Delay9_reg[14] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_reg[0] <= Delay9_reg_next[0];
          Delay9_reg[1] <= Delay9_reg_next[1];
          Delay9_reg[2] <= Delay9_reg_next[2];
          Delay9_reg[3] <= Delay9_reg_next[3];
          Delay9_reg[4] <= Delay9_reg_next[4];
          Delay9_reg[5] <= Delay9_reg_next[5];
          Delay9_reg[6] <= Delay9_reg_next[6];
          Delay9_reg[7] <= Delay9_reg_next[7];
          Delay9_reg[8] <= Delay9_reg_next[8];
          Delay9_reg[9] <= Delay9_reg_next[9];
          Delay9_reg[10] <= Delay9_reg_next[10];
          Delay9_reg[11] <= Delay9_reg_next[11];
          Delay9_reg[12] <= Delay9_reg_next[12];
          Delay9_reg[13] <= Delay9_reg_next[13];
          Delay9_reg[14] <= Delay9_reg_next[14];
        end
      end
    end

  assign Delay9_out1 = Delay9_reg[14];
  assign Delay9_reg_next[0] = validIn;
  assign Delay9_reg_next[1] = Delay9_reg[0];
  assign Delay9_reg_next[2] = Delay9_reg[1];
  assign Delay9_reg_next[3] = Delay9_reg[2];
  assign Delay9_reg_next[4] = Delay9_reg[3];
  assign Delay9_reg_next[5] = Delay9_reg[4];
  assign Delay9_reg_next[6] = Delay9_reg[5];
  assign Delay9_reg_next[7] = Delay9_reg[6];
  assign Delay9_reg_next[8] = Delay9_reg[7];
  assign Delay9_reg_next[9] = Delay9_reg[8];
  assign Delay9_reg_next[10] = Delay9_reg[9];
  assign Delay9_reg_next[11] = Delay9_reg[10];
  assign Delay9_reg_next[12] = Delay9_reg[11];
  assign Delay9_reg_next[13] = Delay9_reg[12];
  assign Delay9_reg_next[14] = Delay9_reg[13];



  Detect_Increase_block3 u_Detect_Increase (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .U(Delay9_out1),
                                            .Y(Detect_Increase_out1)
                                            );

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Delay9_out1;
        end
      end
    end



  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : HDL_Counter4_process
      if (reset == 1'b1) begin
        HDL_Counter4_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          if (Detect_Increase_out1 == 1'b1) begin
            HDL_Counter4_out1 <= 5'b00000;
          end
          else if (Delay_out1 == 1'b1) begin
            HDL_Counter4_out1 <= HDL_Counter4_out1 + 5'b00001;
          end
        end
      end
    end



  assign Multiply3_cast = {1'b0, {HDL_Counter4_out1, 4'b0000}};
  assign Multiply3_out1 = Multiply3_cast[8];



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_reg[0] <= 1'b0;
        Delay8_reg[1] <= 1'b0;
        Delay8_reg[2] <= 1'b0;
        Delay8_reg[3] <= 1'b0;
        Delay8_reg[4] <= 1'b0;
        Delay8_reg[5] <= 1'b0;
        Delay8_reg[6] <= 1'b0;
        Delay8_reg[7] <= 1'b0;
        Delay8_reg[8] <= 1'b0;
        Delay8_reg[9] <= 1'b0;
        Delay8_reg[10] <= 1'b0;
        Delay8_reg[11] <= 1'b0;
        Delay8_reg[12] <= 1'b0;
        Delay8_reg[13] <= 1'b0;
        Delay8_reg[14] <= 1'b0;
        Delay8_reg[15] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_reg[0] <= Delay8_reg_next[0];
          Delay8_reg[1] <= Delay8_reg_next[1];
          Delay8_reg[2] <= Delay8_reg_next[2];
          Delay8_reg[3] <= Delay8_reg_next[3];
          Delay8_reg[4] <= Delay8_reg_next[4];
          Delay8_reg[5] <= Delay8_reg_next[5];
          Delay8_reg[6] <= Delay8_reg_next[6];
          Delay8_reg[7] <= Delay8_reg_next[7];
          Delay8_reg[8] <= Delay8_reg_next[8];
          Delay8_reg[9] <= Delay8_reg_next[9];
          Delay8_reg[10] <= Delay8_reg_next[10];
          Delay8_reg[11] <= Delay8_reg_next[11];
          Delay8_reg[12] <= Delay8_reg_next[12];
          Delay8_reg[13] <= Delay8_reg_next[13];
          Delay8_reg[14] <= Delay8_reg_next[14];
          Delay8_reg[15] <= Delay8_reg_next[15];
        end
      end
    end

  assign Delay8_out1 = Delay8_reg[15];
  assign Delay8_reg_next[0] = dataIn;
  assign Delay8_reg_next[1] = Delay8_reg[0];
  assign Delay8_reg_next[2] = Delay8_reg[1];
  assign Delay8_reg_next[3] = Delay8_reg[2];
  assign Delay8_reg_next[4] = Delay8_reg[3];
  assign Delay8_reg_next[5] = Delay8_reg[4];
  assign Delay8_reg_next[6] = Delay8_reg[5];
  assign Delay8_reg_next[7] = Delay8_reg[6];
  assign Delay8_reg_next[8] = Delay8_reg[7];
  assign Delay8_reg_next[9] = Delay8_reg[8];
  assign Delay8_reg_next[10] = Delay8_reg[9];
  assign Delay8_reg_next[11] = Delay8_reg[10];
  assign Delay8_reg_next[12] = Delay8_reg[11];
  assign Delay8_reg_next[13] = Delay8_reg[12];
  assign Delay8_reg_next[14] = Delay8_reg[13];
  assign Delay8_reg_next[15] = Delay8_reg[14];



  assign XOR4_out1 = dataIn ^ Delay8_out1;



  assign Multiport_Switch4_out1 = (Multiply3_out1 == 1'b0 ? XOR4_out1 :
              Delay8_out1);



  assign dataOut = Multiport_Switch4_out1;

  assign validOut = Delay_out1;

endmodule  // Stage_4

